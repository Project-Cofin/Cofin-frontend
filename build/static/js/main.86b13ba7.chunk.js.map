{"version":3,"sources":["features/common/pages/Navigation.js","features/map/components/LocalMap.js","features/map/components/Options.js","features/map/components/LocalMapInfo.js","features/map/components/Geolocation.js","features/map/pages/LocalMapPage.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Navigation","class","type","to","kakao","window","LocalMap","useEffect","geoInfo","localStorage","getItem","split","alert","mapContainer","document","getElementById","mapOption","center","maps","LatLng","level","map","Map","positions","content","latlng","i","length","marker","Marker","position","infowindow","InfoWindow","event","addListener","makeOverListener","makeOutListener","open","close","className","id","style","width","height","float","Options","OptionUl","label","styled","ul","LocalMapInfo","InfoUl","InfoDiv","div","Geolocation","navigator","geolocation","getCurrentPosition","setItem","coords","latitude","longitude","error","console","enableHighAccuracy","maximumAge","timeout","Infinity","LocalMapPage","App","path","element","HomePage","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86b13ba7.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Navigation = () => (\r\n<nav class=\"navi\">\r\n    <ul>\r\n        \r\n        <li type='none'>\r\n            <Link to='/home'></Link> &nbsp;\r\n            <Link to='/QnA'></Link> &nbsp;\r\n            <Link to='/organ'></Link></li>\r\n        \r\n    </ul>\r\n</nav>\r\n)\r\n\r\nexport default Navigation;","import React, { useEffect } from \"react\";\r\nconst { kakao } = window;\r\n\r\n\r\nfunction LocalMap() {\r\n  useEffect(() => {\r\n    var geoInfo = window.localStorage.getItem('sessionGeo').split(',')\r\n    alert(geoInfo)\r\n    var mapContainer = document.getElementById('map'), // 지도를 표시할 div  \r\n    mapOption = { \r\n        // center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표\r\n        center: new kakao.maps.LatLng(geoInfo[0], geoInfo[1]), // 지도의 중심좌표\r\n        level: 3 // 지도의 확대 레벨\r\n    };\r\n\r\n    var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n    \r\n    // 마커를 표시할 위치와 내용을 가지고 있는 객체 배열입니다 \r\n    var positions = [\r\n        {\r\n            content: '<div>카카오</div>', \r\n            latlng: new kakao.maps.LatLng(geoInfo[0], geoInfo[1])\r\n        },\r\n        {\r\n            content: '<div>카카오</div>', \r\n            latlng: new kakao.maps.LatLng(33.450705, 126.570677)\r\n        },\r\n        {\r\n            content: '<div>생태연못</div>', \r\n            latlng: new kakao.maps.LatLng(33.450936, 126.569477)\r\n        },\r\n        {\r\n            content: '<div>텃밭</div>', \r\n            latlng: new kakao.maps.LatLng(33.450879, 126.569940)\r\n        },\r\n        {\r\n            content: '<div>근린공원</div>',\r\n            latlng: new kakao.maps.LatLng(33.451393, 126.570738)\r\n        }\r\n    ];\r\n\r\n    for (var i = 0; i < positions.length; i ++) {\r\n        // 마커를 생성합니다\r\n        var marker = new kakao.maps.Marker({\r\n            map: map, // 마커를 표시할 지도\r\n            position: positions[i].latlng // 마커의 위치\r\n        });\r\n\r\n        // 마커에 표시할 인포윈도우를 생성합니다 \r\n        var infowindow = new kakao.maps.InfoWindow({\r\n            content: positions[i].content // 인포윈도우에 표시할 내용\r\n        });\r\n\r\n        // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n        // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n        kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\r\n        kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\r\n    }\r\n\r\n    // 인포윈도우를 표시하는 클로저를 만드는 함수입니다 \r\n    function makeOverListener(map, marker, infowindow) {\r\n        return function() {\r\n            infowindow.open(map, marker);\r\n        };\r\n    }\r\n\r\n    // 인포윈도우를 닫는 클로저를 만드는 함수입니다 \r\n    function makeOutListener(infowindow) {\r\n        return function() {\r\n            infowindow.close();\r\n        };\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"map\"\r\n      id=\"map\"\r\n      style={{ width: \"1000px\", height: \"500px\", float: \"left\"}}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default LocalMap;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Options = () => {\r\n    return(<>\r\n    <OptionUl>\r\n        <li>\r\n            <label>표시 대상 선택</label><br/>\r\n            <select>\r\n                <optgroup label=\"표시 대상 선택\">\r\n                  <option>선별 진료소</option>  \r\n                  <option>확진자 발생 위치</option>  \r\n                </optgroup>\r\n            </select>\r\n        </li>\r\n    </OptionUl>\r\n    </>)\r\n}\r\n\r\nexport default Options\r\n\r\nconst OptionUl = styled.ul`\r\n    list-style: none;\r\n`","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst LocalMapInfo = () => {\r\n\r\n    return(<>\r\n        <InfoUl>\r\n            <li>\r\n                <div><label>진료소 A</label></div>\r\n                <InfoDiv></InfoDiv>\r\n            </li>\r\n        </InfoUl>\r\n    </>)\r\n}\r\n\r\nexport default LocalMapInfo\r\n\r\nconst InfoDiv = styled.div`\r\n    width: 200px;\r\n    height: 300px;\r\n    border: solid 1px black;\r\n    display: inline-block;\r\n`\r\n\r\nconst InfoUl = styled.ul`\r\n    list-style: none;\r\n`","import React, {useEffect} from \"react\";\r\n\r\nconst Geolocation = () => {\r\n    useEffect(() => {\r\n        if (navigator.geolocation) { // GPS를 지원하면\r\n            navigator.geolocation.getCurrentPosition(function(position) {\r\n            //   alert(position.coords.latitude + ' ' + position.coords.longitude);\r\n            window.localStorage.setItem('sessionGeo', [position.coords.latitude, position.coords.longitude])\r\n            }, function(error) {\r\n              console.error(error);\r\n            }, {\r\n              enableHighAccuracy: false,\r\n              maximumAge: 0,\r\n              timeout: Infinity\r\n            });\r\n          } else {\r\n            alert('GPS를 지원하지 않습니다');\r\n          }\r\n    },[])\r\n    return(<></>)\r\n}\r\n\r\nexport default Geolocation","import React from \"react\";\r\nimport { Geolocation, LocalMap, LocalMapInfo, Options } from \"..\";\r\n\r\nconst LocalMapPage = () => {\r\n\r\n  return (<>\r\n    <Options/>\r\n    <LocalMap/>\r\n    <LocalMapInfo/>\r\n    <Geolocation/>\r\n    </>);\r\n};\r\n\r\nexport default LocalMapPage;","import {Route, Routes} from 'react-router-dom'; \n//21-11-06 v6로 버전업이후 switch -> routes / component -> element= {<Home/>}/>\nimport { HomePage } from 'features/home/index';\nimport { Navigation } from 'features/common/index'\n\nimport { LocalMapPage } from 'features/map/index';\n//Attempted import error: 'Action' is not exported from 'history'. histroy 버전 5로 업.\n\n\nfunction App() {\n  return(<>\n  <Navigation/>\n    <Routes>\n          <Route path='/' element= { HomePage }/>\n          <Route path='/home' element= { '/' }/>\n          \n          <Route path='/organ/local' element={LocalMapPage}/>\n\n    </Routes>    \n</>)}\n\n\nexport default App;\n\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
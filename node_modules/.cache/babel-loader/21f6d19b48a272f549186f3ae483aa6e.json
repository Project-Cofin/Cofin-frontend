{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { chatbotAPI } from \"..\";\n\nconst ANSWER = async x => {\n  const res = await chatbotAPI.chatAnswer(x);\n  return res.data;\n};\n\n_c = ANSWER;\n\nconst STATUS = async x => {\n  const res = await chatbotAPI.statusAnswer(x);\n  return res.data;\n};\n\n_c2 = STATUS;\n\nconst INITSTATUS = async () => {\n  const res = await chatbotAPI.getStatus();\n  return res.data;\n};\n\n_c3 = INITSTATUS;\nexport const answer = createAsyncThunk('/chat', ANSWER);\nexport const answerStatus = createAsyncThunk('/status', STATUS);\nexport const initStatus = createAsyncThunk('/initStatus', INITSTATUS);\nconst chatbotSlice = createSlice({\n  name: 'bot',\n  initialState: {\n    answersState: {},\n    // healthState:{\n    //   symptom: '', details: '', level: '', answer: ''\n    // },\n    healthStates: {},\n    type: '',\n    keyword: '',\n    params: {}\n  },\n  reducers: {},\n  extraReducers: {\n    [answer.fulfilled]: (state, action) => {\n      state.answersState = { ...state.answersState,\n        [action.payload['queryid']]: action.payload['answer']\n      };\n    },\n    [answerStatus.fulfilled]: (state, action) => {\n      state.healthStates = { ...state.healthStates,\n        [action.payload.symptom]: action.payload\n      };\n    },\n    [initStatus.fulfilled]: (state, action) => {\n      window.localStorage.setItem('counter', 0);\n      action.payload.forEach(element => {\n        state.healthStates = { ...state.healthStates,\n          [element['symptom']]: action.payload\n        };\n      });\n    }\n  }\n});\nexport const currentAnswersState = state => state.bot.answersState;\nexport const currentHealthState = state => state.bot.healthState; // export const currentBotParam = state => state.bot.param\n\nexport default chatbotSlice.reducer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ANSWER\");\n$RefreshReg$(_c2, \"STATUS\");\n$RefreshReg$(_c3, \"INITSTATUS\");","map":{"version":3,"sources":["C:/Users/bitcamp/Desktop/cofin-msa-board/frontend/src/features/chatbot/reducer/chatbotSlice.js"],"names":["createAsyncThunk","createSlice","chatbotAPI","ANSWER","x","res","chatAnswer","data","STATUS","statusAnswer","INITSTATUS","getStatus","answer","answerStatus","initStatus","chatbotSlice","name","initialState","answersState","healthStates","type","keyword","params","reducers","extraReducers","fulfilled","state","action","payload","symptom","window","localStorage","setItem","forEach","element","currentAnswersState","bot","currentHealthState","healthState","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,IAA3B;;AAEA,MAAMC,MAAM,GAAG,MAAOC,CAAP,IAAa;AACzB,QAAMC,GAAG,GAAG,MAAMH,UAAU,CAACI,UAAX,CAAsBF,CAAtB,CAAlB;AACA,SAAOC,GAAG,CAACE,IAAX;AACF,CAHD;;KAAMJ,M;;AAIN,MAAMK,MAAM,GAAG,MAAOJ,CAAP,IAAa;AAC1B,QAAMC,GAAG,GAAG,MAAMH,UAAU,CAACO,YAAX,CAAwBL,CAAxB,CAAlB;AACA,SAAOC,GAAG,CAACE,IAAX;AACD,CAHD;;MAAMC,M;;AAIN,MAAME,UAAU,GAAG,YAAW;AAC5B,QAAML,GAAG,GAAG,MAAMH,UAAU,CAACS,SAAX,EAAlB;AACA,SAAON,GAAG,CAACE,IAAX;AACD,CAHD;;MAAMG,U;AAMN,OAAO,MAAME,MAAM,GAAGZ,gBAAgB,CAAC,OAAD,EAAUG,MAAV,CAA/B;AACP,OAAO,MAAMU,YAAY,GAAGb,gBAAgB,CAAC,SAAD,EAAYQ,MAAZ,CAArC;AACP,OAAO,MAAMM,UAAU,GAAGd,gBAAgB,CAAC,aAAD,EAAgBU,UAAhB,CAAnC;AAEP,MAAMK,YAAY,GAAGd,WAAW,CAAC;AAC/Be,EAAAA,IAAI,EAAE,KADyB;AAE/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,YAAY,EAAE,EADF;AAEZ;AACA;AACA;AACAC,IAAAA,YAAY,EAAC,EALD;AAMZC,IAAAA,IAAI,EAAE,EANM;AAOZC,IAAAA,OAAO,EAAE,EAPG;AAQZC,IAAAA,MAAM,EAAE;AARI,GAFiB;AAY/BC,EAAAA,QAAQ,EAAE,EAZqB;AAa/BC,EAAAA,aAAa,EAAE;AACb,KAACZ,MAAM,CAACa,SAAR,GAAoB,CAAEC,KAAF,EAASC,MAAT,KAAqB;AACvCD,MAAAA,KAAK,CAACR,YAAN,GAAqB,EAAC,GAAGQ,KAAK,CAACR,YAAV;AAAwB,SAACS,MAAM,CAACC,OAAP,CAAe,SAAf,CAAD,GAA4BD,MAAM,CAACC,OAAP,CAAe,QAAf;AAApD,OAArB;AACD,KAHY;AAIb,KAACf,YAAY,CAACY,SAAd,GAA0B,CAAEC,KAAF,EAASC,MAAT,KAAqB;AAC7CD,MAAAA,KAAK,CAACP,YAAN,GAAqB,EAAC,GAAGO,KAAK,CAACP,YAAV;AAAwB,SAACQ,MAAM,CAACC,OAAP,CAAeC,OAAhB,GAAyBF,MAAM,CAACC;AAAxD,OAArB;AACD,KANY;AAOb,KAACd,UAAU,CAACW,SAAZ,GAAwB,CAAEC,KAAF,EAASC,MAAT,KAAoB;AAC1CG,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,SAA5B,EAAuC,CAAvC;AACAL,MAAAA,MAAM,CAACC,OAAP,CAAeK,OAAf,CAAuBC,OAAO,IAAI;AAChCR,QAAAA,KAAK,CAACP,YAAN,GAAqB,EAAC,GAAGO,KAAK,CAACP,YAAV;AAAwB,WAACe,OAAO,CAAC,SAAD,CAAR,GAAqBP,MAAM,CAACC;AAApD,SAArB;AACD,OAFD;AAID;AAbY;AAbgB,CAAD,CAAhC;AA8BA,OAAO,MAAMO,mBAAmB,GAAGT,KAAK,IAAIA,KAAK,CAACU,GAAN,CAAUlB,YAA/C;AACP,OAAO,MAAMmB,kBAAkB,GAAGX,KAAK,IAAIA,KAAK,CAACU,GAAN,CAAUE,WAA9C,C,CACP;;AACA,eAAevB,YAAY,CAACwB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { chatbotAPI } from \"..\";\r\n\r\nconst ANSWER = async (x) => {\r\n   const res = await chatbotAPI.chatAnswer(x)\r\n   return res.data\r\n}\r\nconst STATUS = async (x) => {\r\n  const res = await chatbotAPI.statusAnswer(x)\r\n  return res.data\r\n}\r\nconst INITSTATUS = async() => {\r\n  const res = await chatbotAPI.getStatus()\r\n  return res.data\r\n}\r\n\r\n\r\nexport const answer = createAsyncThunk('/chat', ANSWER)\r\nexport const answerStatus = createAsyncThunk('/status', STATUS)\r\nexport const initStatus = createAsyncThunk('/initStatus', INITSTATUS)\r\n\r\nconst chatbotSlice = createSlice({\r\n  name: 'bot',\r\n  initialState: {\r\n    answersState: {},\r\n    // healthState:{\r\n    //   symptom: '', details: '', level: '', answer: ''\r\n    // },\r\n    healthStates:{},\r\n    type: '',\r\n    keyword: '',\r\n    params: {}\r\n  },\r\n  reducers: {},\r\n  extraReducers: {\r\n    [answer.fulfilled]: ( state, action ) => { \r\n      state.answersState = {...state.answersState, [action.payload['queryid']]:action.payload['answer']}\r\n    },\r\n    [answerStatus.fulfilled]: ( state, action ) => { \r\n      state.healthStates = {...state.healthStates, [action.payload.symptom]:action.payload}\r\n    },\r\n    [initStatus.fulfilled]: ( state, action) => {\r\n      window.localStorage.setItem('counter', 0)\r\n      action.payload.forEach(element => {\r\n        state.healthStates = {...state.healthStates, [element['symptom']]:action.payload}\r\n      });\r\n      \r\n    }\r\n  }\r\n\r\n})\r\nexport const currentAnswersState = state => state.bot.answersState\r\nexport const currentHealthState = state => state.bot.healthState\r\n// export const currentBotParam = state => state.bot.param\r\nexport default chatbotSlice.reducer;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bitcamp\\\\Desktop\\\\cofin-msa-board\\\\frontend\\\\src\\\\features\\\\user\\\\1-login\\\\UserLogin.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link as RouterLink, useNavigate, useHistory } from 'react-router-dom';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport { Icon } from '@iconify/react';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport * as Yup from 'yup';\nimport 'formik';\nimport { Link, Stack, Checkbox, TextField, IconButton, InputAdornment, FormControlLabel } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserLogin() {\n  _s();\n\n  // const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [login, setLogin] = useState({});\n  const {\n    username,\n    password\n  } = login;\n  const navigate = useNavigate();\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('메일 형식에 맞게 입력해주세요').required('메일 주소를 입력해주세요'),\n    password: Yup.string().required('비밀번호를 입력해주세요')\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      remember: true\n    },\n    validationSchema: LoginSchema,\n    onSubmit: () => {// navigate('/', {replace: true});\n      // navigate=클릭하면 메인페이지 뜨게 주소 넣기\n      // RETRY\n    }\n  });\n  const {\n    errors,\n    touched,\n    values,\n    isSubmitting,\n    handleSubmit,\n    getFieldProps\n  } = formik;\n\n  const handleShowPassword = () => {\n    setShowPassword(show => !show);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleShowPassword,\n                edge: \"end\",\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: showPassword ? eyeFill : eyeOffFill\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        sx: {\n          my: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, { ...getFieldProps('remember'),\n            checked: values.remember\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 22\n          }, this),\n          label: \"Remember me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          component: RouterLink,\n          variant: \"subtitle2\",\n          to: \"#\",\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uCC3E\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n        fullWidth: true,\n        size: \"large\",\n        type: \"submit\",\n        variant: \"contained\",\n        loading: isSubmitting,\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserLogin, \"Mjk8iFFytQvg3f9VzZXn8Nokc9g=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = UserLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserLogin\");","map":{"version":3,"sources":["C:/Users/bitcamp/Desktop/cofin-msa-board/frontend/src/features/user/1-login/UserLogin.js"],"names":["React","useState","Link","RouterLink","useNavigate","useHistory","useFormik","Form","FormikProvider","Icon","eyeFill","eyeOffFill","Yup","Stack","Checkbox","TextField","IconButton","InputAdornment","FormControlLabel","LoadingButton","UserLogin","showPassword","setShowPassword","login","setLogin","username","password","navigate","LoginSchema","object","shape","email","string","required","formik","initialValues","remember","validationSchema","onSubmit","errors","touched","values","isSubmitting","handleSubmit","getFieldProps","handleShowPassword","show","Boolean","endAdornment","my"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link as RouterLink, useNavigate, useHistory  } from 'react-router-dom';\r\nimport { useFormik, Form, FormikProvider } from 'formik';\r\nimport { Icon } from '@iconify/react';\r\nimport eyeFill from '@iconify/icons-eva/eye-fill';\r\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\r\nimport * as Yup from 'yup';\r\nimport {} from 'formik'\r\nimport {\r\n    Link,\r\n    Stack,\r\n    Checkbox,\r\n    TextField,\r\n    IconButton,\r\n    InputAdornment,\r\n    FormControlLabel\r\n  } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n\r\nexport default function UserLogin() {\r\n    // const navigate = useNavigate();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [login, setLogin] = useState({})\r\n    const {username, password} = login\r\n    const navigate = useNavigate()\r\n\r\n    const LoginSchema = Yup.object().shape({\r\n        email: Yup.string().email('메일 형식에 맞게 입력해주세요').required('메일 주소를 입력해주세요'),\r\n        password: Yup.string().required('비밀번호를 입력해주세요')\r\n    })\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password:\"\",\r\n            remember: true\r\n        },\r\n        validationSchema: LoginSchema,\r\n        onSubmit: () =>{\r\n            // navigate('/', {replace: true});\r\n            // navigate=클릭하면 메인페이지 뜨게 주소 넣기\r\n            // RETRY\r\n        }\r\n    })\r\n    const {errors, touched, values, isSubmitting, handleSubmit, getFieldProps}=formik;\r\n\r\n    const handleShowPassword=()=>{\r\n        setShowPassword((show)=>!show);\r\n    }\r\n\r\n    return(\r\n        <FormikProvider value={formik}>\r\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n        <Stack spacing={3}>\r\n          <TextField\r\n            fullWidth\r\n            autoComplete=\"username\"\r\n            type=\"email\"\r\n            label=\"Email address\"\r\n            {...getFieldProps('email')}\r\n            error={Boolean(touched.email && errors.email)}\r\n            helperText={touched.email && errors.email}\r\n          />\r\n\r\n          <TextField\r\n            fullWidth\r\n            autoComplete=\"current-password\"\r\n            type={showPassword ? 'text' : 'password'}\r\n            label=\"Password\"\r\n            {...getFieldProps('password')}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton onClick={handleShowPassword} edge=\"end\">\r\n                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n            error={Boolean(touched.password && errors.password)}\r\n            helperText={touched.password && errors.password}\r\n          />\r\n        </Stack>\r\n\r\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }}>\r\n          <FormControlLabel\r\n            control={<Checkbox {...getFieldProps('remember')} checked={values.remember} />}\r\n            label=\"Remember me\"\r\n          />\r\n\r\n          <Link component={RouterLink} variant=\"subtitle2\" to=\"#\">\r\n            비밀번호 찾기\r\n          </Link>\r\n        </Stack>\r\n\r\n        <LoadingButton\r\n          fullWidth\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          loading={isSubmitting}\r\n        >\r\n          로그인\r\n        </LoadingButton>\r\n      </Form>\r\n    </FormikProvider>\r\n    )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}